/*
 * Copyright (c) 2016 droidwolf(droidwolf2006@gmail.com)
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.droidwolf.sqlitedao;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.Map;

public class CRUDGenerator {
	private final boolean LITE=!true;
	
	private final String mClassName;
	private final Map<MyField, MyColumn> mFields;
	private  final boolean mAliasColName;
	private final boolean mBoolFalseSetNull;
	
	/**主键。若无主键有自增字段，则自增自动当作主键*/
	private MyField mKeyField=null;
	private MyColumn mKeyColumn=null;
	private int mAutoIncColNum=0;
	
	public CRUDGenerator(String tblName,Map<MyField, MyColumn> fields,boolean aliasColname,boolean boolFalseSetNull){
		mFields=fields;
		mAliasColName=aliasColname;
		mBoolFalseSetNull=boolFalseSetNull;
		mClassName=tblName;
		
		for( MyField field:mFields.keySet()){
			MyColumn column= mFields.get(field);
			if(column!=null){
				if(column.primaryKey()){
					mKeyField=field;
					mKeyColumn=column;
				}else if( column.unique()){
					if(mKeyField==null ){
						mKeyField=field;
						mKeyColumn=column;
					}
				}else if( column.autoInc()){
					if(mKeyField==null ||!mKeyColumn.primaryKey()){
						mKeyField=field;
						mKeyColumn=column;
					}
				}
				if( column.autoInc()){
					++mAutoIncColNum;
				}
			}
		}
	}

	private void write(String str,OutputStreamWriter osw) throws IOException{
		if(str!=null){
			osw.write(str);
			osw.write("\n");
		}
	}
	
	public void generate(String path){
		OutputStreamWriter osw=null;
		String filename=(path.endsWith("//")? path+"//":path)+ mClassName+"CRUD.java";
		try{
			osw = new OutputStreamWriter(new FileOutputStream(filename), "UTF-8");
			//
			//import
			write (genImport(),osw);
			
			write(genInfo(),osw);
			
			//class name
			write("public class "+ mClassName+"CRUD{",osw);
			
			//var
			write(genVariables(),osw);
			
			write(genConstruct(), osw);
			write("	//\n	//query\n	//", osw);
			write(genQuery(), osw);
			write(genQueryToList(), osw);
			
			if (!LITE){
				write(genQueryFirst(), osw);
				write(genQueryTotalRows(), osw);
			}

			write("\n	//\n	//inset, update, delete\n	//",osw);
			write(genInsert(), osw);
			write(genUpdate(), osw);
			write(genDelete(), osw);
			
			write(genInsert0(), osw);
			write(genUpdate0(), osw);
			write(genDelete0(), osw);
			write(genTranEntity2CV() , osw);
			write(genFetchEntity(), osw);

			if(!LITE){
				write("\n	//\n	//bulkInsert, bulkUpdate, bulkDelete\n	//",osw);
				write(genBulkInsert(), osw);
				write(genBulkUpdate(), osw);
				write(genBulkDelete(), osw);
			}
			
			write("\n	//\n	//stuff\n	//",osw);
			write(genCOLUMNS(), osw);
			write(genCOLUMNINDEXS(), osw);
			if(!LITE){
				write(genDropTable(), osw);
			}
			write(genCreateTable(), osw);
			
			write("}//end class "+ mClassName+"CRUD",osw);
			osw.flush();
			System.out.println("generate CRUD finished!");
		}catch(Exception ex){
			System.out.println(ex.getMessage());
			System.out.flush();
		}finally{
			if(osw!=null)
				try{
					osw.close();
				}catch(IOException e){
					e.printStackTrace();
				}
		}
	}
/*
 * this file generated by sqliteCRUDGen.jar
 * http://droidwolf.iteye.com/
 */
	private String genInfo(){
		return
			"/*"
			+"\n * generated by sqliteCRUDGen.jar"
			+"\n * http://obacow.iteye.com/"
			+"\n */";
	}
	private String genImport(){
		return
			"import java.util.List;"
			+"\nimport java.util.ArrayList;"
			+"\nimport android.text.TextUtils;"
			+"\nimport android.database.Cursor;"
			+"\nimport android.content.ContentValues;"
			+"\nimport android.database.SQLException;"
			+"\nimport android.database.sqlite.SQLiteDatabase;"
			+"\nimport android.database.sqlite.SQLiteOpenHelper;\n";
	}
	
	private String genVariables(){
		return
			"	public static final String TABLENAME = \""+mClassName+"\";"
			//+"\n	public static final Object SYNC= new Object();"
			+"\n	private final SQLiteOpenHelper mOpenHelper;\n";
	}
	
	private String genConstruct(){
		return "	public "+mClassName +"CRUD(SQLiteOpenHelper openHelper){"
				+"\n		mOpenHelper=openHelper;"
				+"\n	}";
	}
	
	private String genQuery(){
		StringBuffer sb = new StringBuffer();
		sb.append("	public Cursor query(String whereClause, String []whereArgs){"
		+"\n		final String sql = \"SELECT \"");
		
		int i = 0, nlen = mFields.size() - 1;
		for (MyField field : mFields.keySet()){
			sb.append("\n			+ COLUMNS.")
			.append(field.getName().toUpperCase());
			if (i != nlen){
				sb.append(" + \",\"");
			}
			++i;
		}
		sb.append("\n			+ \" FROM \" + (TextUtils.isEmpty(whereClause)? TABLENAME : TABLENAME+\" WHERE \"+whereClause);"
		+"\n		return mOpenHelper.getReadableDatabase().rawQuery(sql, whereArgs);"
		+"\n	}");
		return sb.toString();
	}
	
	private String genQueryToList(){
		String className=mClassName;
		return new StringBuffer().append(
		"	public List<").append(className).append("> queryToList(String whereClause, String []whereArgs){"
		+"\n		Cursor cursor=null;"
		+"\n		try{"
		+"\n			synchronized(mOpenHelper){"
		+"\n				if ( (cursor = query(whereClause, whereArgs) )==null || cursor.getCount()<1)return null;"
		+"\n				final List<").append(className).append("> list = new ArrayList<").append(className).append(">(cursor.getCount());"
		+"\n				for (cursor.moveToFirst(); !cursor.isAfterLast(); cursor.moveToNext()) {"
		+"\n					list.add( fetch").append(mClassName).append("(cursor) );"
		+"\n				}"
		+"\n				cursor.close();"
		+"\n				return list;"
		+"\n			}"
		+"\n		}catch(SQLException ex){"
		+"\n			ex.printStackTrace();"
		+"\n		}finally{"
		+"\n			if (cursor!= null) cursor.close();"
		+"\n		}"
		+"\n		return null;"
		+"\n	}").toString();
	}

	private String genFetchEntity(){
		StringBuffer sb = new StringBuffer();
		String className=mClassName;
		sb.append("	/*private */static final ").append(className).append(" fetch").append(mClassName).append("(Cursor cursor){"
		+"\n		final ").append(className).append(" entity=new ").append(className).append("();");
		
		for (MyField field : mFields.keySet()){
			String fname= upperCaseFirstChar(field.getName());
			sb.append("\n		").append("entity.set").append(fname).append("( ");
			tranSqliteTypeGetMethod(sb,field, mFields.get(field));
			sb.append(" );");
		}
		sb.append("\n		return entity;"
		+"\n	}");
		return sb.toString();
	}
	private String genQueryTotalRows(){
		return "	public int queryTotalRows(String whereClause, String []whereArgs){"
		+"\n		final String sql = \"SELECT COUNT(*) FROM \"  +(TextUtils.isEmpty(whereClause)? TABLENAME : TABLENAME+\" WHERE \"+whereClause);"
		+"\n		Cursor cursor=null;"
		+"\n		SQLiteDatabase db=null;"
		+"\n		try{"
		+"\n			synchronized(mOpenHelper){"
		+"\n				cursor=(db=mOpenHelper.getReadableDatabase()).rawQuery(sql, whereArgs);"
		+"\n				if (cursor!=null&&cursor.moveToFirst() ) return cursor.getInt(0);"
		+"\n			}"
		+"\n		}catch(SQLException ex){"
		+"\n			ex.printStackTrace();"
		+"\n		}finally{"
		+"\n			if (cursor!=null) cursor.close();"
		+"\n			if (db!=null) db.close();"
		+"\n		}"
		+"\n		return -1;"
		+"\n	}";
	}

	private String genQueryFirst(){
	    return  new StringBuffer().append(
		"	public ").append(mClassName).append(" queryFirst(String whereClause, String []whereArgs){"
		+"\n		Cursor cursor=null;"
		+"\n		try{"
		+"\n			synchronized(mOpenHelper){"
		+"\n				if ( (cursor = query(whereClause, whereArgs) )!=null && cursor.moveToFirst()){"
		+"\n					return fetch").append(mClassName).append("(cursor);"
		+"\n				}"
		+"\n			}"
		+"\n		}catch(SQLException ex){"
		+"\n			ex.printStackTrace();"
		+"\n		}finally{"
		+"\n			if (cursor!= null) cursor.close();"
		+"\n		}"
		+"\n		return null;"
		+"\n	}").toString();
	}
	
	private String genInsert(){
		return  new StringBuffer().append(
		  "	public boolean insert(").append(mClassName).append(" entity){"
		 +"\n		SQLiteDatabase db=null;"
		 +"\n		try{"
		 +"\n			return insert0(db=mOpenHelper.getWritableDatabase(), entity);"
		 +"\n		}catch(SQLException ex){"
		 +"\n			ex.printStackTrace();"
		 +"\n		}finally{"
		 +"\n			if (db!=null) db.close();"
		 +"\n		}"
		 +"\n		return false;"
		 +"\n	}").toString();
	}
	
	private String genInsert0(){
	    return  new StringBuffer().append(
		 "	/*private */static final boolean insert0(SQLiteDatabase db, ").append(mClassName).append(" entity){"
		 +"\n		return db.insert(TABLENAME, null, tranEntity2CV(entity, true) ) >0;"
		 +"\n	}").toString();
	}
	
	private String genUpdate(){
		StringBuffer sb = new StringBuffer();
		sb.append("	public boolean update(").append(mClassName).append(" entity");
		if (mKeyField == null){
			sb.append(", String whereClause, String []whereArgs){");
		}else{
			sb.append("){");
		}
		sb.append(
		   "\n		SQLiteDatabase db=null;"
		 +"\n		try{");
		if (mKeyField == null){
			sb.append("\n			return update0(db=mOpenHelper.getWritableDatabase(), entity, whereClause, whereArgs);");
		}else{
			String fName= upperCaseFirstChar(mKeyField.getName());
			String conditionVal=mKeyField.getType().equals(String.class) ? "entity.get"+fName+"()" :"String.valueOf(entity.get"+fName+"())";
			sb.append("\n			return update0(db=mOpenHelper.getWritableDatabase(), entity, COLUMNS.").append(mKeyField.getName().toUpperCase())
			.append("+\"=?\", new String[]{").append(conditionVal).append("} );");
		}
		 sb.append(
		   "\n		}catch(SQLException ex){"
		 +"\n			ex.printStackTrace();"
		 +"\n		}finally{"
		 +"\n			if (db!=null) db.close();"
		 +"\n		}"
		 +"\n		return false;"
		 +"\n	}");
		return sb.toString();
	}
	
	private String genUpdate0(){
		return new StringBuffer().append(
			"	/*private */static final boolean update0(SQLiteDatabase db, ").append(mClassName).append(" entity, String whereClause, String []whereArgs){"
			+"\n		return db.update(TABLENAME, tranEntity2CV(entity, false), whereClause, whereArgs) >0;"
			+"\n	}").toString();
	}
	
	private String genTranEntity2CV(){
		StringBuffer sb = new StringBuffer();
		int sizeInsert=mFields.size()-mAutoIncColNum,sizeUpdate=mFields.size()- (mKeyField != null? 1:0);
		
		sb.append("	/*private */static final ContentValues tranEntity2CV(").append(mClassName).append(" entity, boolean forInsert){");
		if(sizeInsert!=sizeUpdate){
			sb.append("\n		final ContentValues cv=new ContentValues( forInsert ? ").append(sizeInsert).append(" : ").append(sizeUpdate).append(");");
		}else{
			sb.append("\n		final ContentValues cv=new ContentValues(").append(sizeInsert).append(");");;
		}
		for (MyField field : mFields.keySet()){
			MyColumn anno=mFields.get(field);
			if(anno!=null&&anno.autoInc()){
				continue;
			}
		    String fName= upperCaseFirstChar(field.getName());
		    boolean keyField=mKeyField!=null &&field.equals(mKeyField);

			if(keyField){
			    sb.append("\n		if (forInsert){");
			}
			sb.append(keyField? "\n			":"\n		").append("cv.put(COLUMNS.").append(field.getName().toUpperCase()).append(", entity.get").append(fName).append("()");
			if (field.getType().equals(boolean.class)){
				
				if(mBoolFalseSetNull&& (anno==null || !anno.notNull())){
					sb.append("? Short.valueOf( (short)1):null");
				}else{
					sb.append("? 1:0");
				}
			}
			sb.append(");");
			if(keyField){
			    sb.append("\n		}");
			}
		}
		
		sb.append("\n		return cv;"
				+"\n	}");
		return sb.toString();
	}
	
	private String genDelete(){
		StringBuffer sb = new StringBuffer();
		sb.append("	public boolean delete(");
		if (mKeyField == null){
			sb.append("String whereClause,String []whereArgs){");
		}else{
			sb.append(mClassName).append(" entity){");
		}
		sb.append(
		   "\n		SQLiteDatabase db=null;"
		 +"\n		try{");
		if (mKeyField == null){
			sb.append("\n			return delete0(db=mOpenHelper.getWritableDatabase(), whereClause, whereArgs);");
		}else{
			String fName= upperCaseFirstChar(mKeyField.getName());
			String conditionVal=mKeyField.getType().equals(String.class) ? "entity.get"+fName+"()" :"String.valueOf(entity.get"+fName+"())";
			sb.append("\n			return delete0(db=mOpenHelper.getWritableDatabase(), COLUMNS.").append(mKeyField.getName().toUpperCase())
			.append("+\"=?\", new String[]{").append(conditionVal).append("} );");
		}
		 sb.append(
				   "\n		}catch(SQLException ex){"
				 +"\n			ex.printStackTrace();"
				 +"\n		}finally{"
				 +"\n			if (db!=null) db.close();"
				 +"\n		}"
				 +"\n		return false;"
				 +"\n	}");
		return sb.toString();
	}
	
	private String genDelete0(){
		return
			"	/*private */static final boolean delete0(SQLiteDatabase db, String whereClause, String []whereArgs){"
			+"\n		return db.delete(TABLENAME, whereClause, whereArgs) >0;"
			+"\n	}";
	}

	private String genBulkInsert(){
		return new StringBuffer().append(
		"	public boolean bulkInsert(List<").append(mClassName).append("> list){"
		+"\n		SQLiteDatabase db=null;"
		+"\n		try{"
		+"\n			(db=mOpenHelper.getWritableDatabase()).beginTransaction();"
		+"\n			for (int i=0, nlen=list.size(); i<nlen; i++){"
		+"\n				if(!insert0(db, list.get(i) ) ) return false;"
		+"\n			}"
		+"\n			db.setTransactionSuccessful();"
		+"\n			return true;"
		+"\n		}catch(SQLException ex){"
		+"\n			ex.printStackTrace();"
		+"\n		}finally{"
		+"\n			if (db!=null){"
		+"\n				db.endTransaction();"
		+"\n				db.close();"
		+"\n			}"
		+"\n		}"
		+"\n		return false;"
		+"\n	}").toString();
	}

	private String genBulkUpdate(){
		StringBuffer sb = new StringBuffer();
		sb.append("	public boolean bulkUpdate(List<").append(mClassName).append("> list){"
				+"\n		SQLiteDatabase db=null;"
				+"\n		try{"
				+"\n			(db=mOpenHelper.getWritableDatabase()).beginTransaction();");
		if (mKeyField != null){
			sb.append(
					"\n			final String []array=new String[1];");
		}
		sb.append(
				"\n			for (int i=0, nlen=list.size(); i<nlen; i++){");

		if (mKeyField == null) {
			sb.append("\n				return false;//update0(db, list.get(i), whereClause, whereArgs);");
		} else {
			String fName= upperCaseFirstChar(mKeyField.getName());
			String conditionVal=mKeyField.getType().equals(String.class) ? "entity.get"+fName+"()" :"String.valueOf(entity.get"+fName+"())";
			sb.append("\n				").append(mClassName).append(" entity=list.get(i);")
			   .append("\n				array[0]=").append(conditionVal).append(";")
			   .append("\n				if(!update0(db, entity, COLUMNS.").append(mKeyField.getName().toUpperCase())
				.append("+\"=?\",array) ) return false;");
		}

		sb.append(
				  "\n			}"
				+"\n			db.setTransactionSuccessful();"
				+"\n			return true;"
				+"\n		}catch(SQLException ex){"
				+"\n			ex.printStackTrace();"
				+"\n		}finally{"
				+"\n			if (db!=null){"
				+"\n				db.endTransaction();"
				+"\n				db.close();"
				+"\n			}"
				+"\n		}"
				+"\n		return false;"
				+"\n	}");
		return sb.toString();
	}
	
	private String genBulkDelete(){
		return mKeyField==null? genBulkDeleteB():genBulkDeleteA(); 
	}
	private String genBulkDeleteA(){
		StringBuffer sb = new StringBuffer();
		final boolean isKeyStr=mKeyField.getType().equals(String.class) ;
		final String fName= upperCaseFirstChar(mKeyField.getName());
		sb.append("	public boolean bulkDelete(List<").append(mClassName).append("> list){"
				+"\n		SQLiteDatabase db=null;"
				+"\n		try{"
				+"\n			final StringBuffer sb = new StringBuffer()"
			//.append("keyName IN(");
				+".append(").append("COLUMNS.").append(mKeyField.getName().toUpperCase()).append(").append(\" IN(\");"
				+"\n			for (int i=0, nlen=list.size()-1; i<=nlen; i++){");
							if (isKeyStr){
								// sb.append("'").append("list(i).getFieldName()").append(",").append(i==nlen? " )":", ");
								sb.append("\n				sb.append(\"'\").append(").append( "list(i).get").append(fName).append("()).append(\"'\").append(i==nlen? \" )\" : \", \");" );
							}else{
								sb.append("\n				sb.append(").append( "list.get(i).get").append(fName).append("() ).append(i==nlen? \" )\" : \", \");" );
							}
				sb.append(
				"\n			}"
				+"\n			return delete0(db=mOpenHelper.getWritableDatabase(), sb.toString(), null);"
				+"\n		}catch(SQLException ex){"
				+"\n			ex.printStackTrace();"
				+"\n		}finally{"
				+"\n			if (db!=null) db.close();"
				+"\n		}"
				+"\n		return false;"
				+"\n	}");
		return sb.toString();
	}
	
	private String genBulkDeleteB(){
		return new StringBuffer().append(
		"	public boolean bulkDelete(List<").append(mClassName).append("> list){"
		+"\n		SQLiteDatabase db=null;"
		+"\n		try{"
		+"\n			(db=mOpenHelper.getWritableDatabase()).beginTransaction();"
		+"\n			for (int i=0, nlen=list.size(); i<nlen; i++){"
		+"\n				return false;//delete0(db, whereClause, whereArgs);"
		+"\n			}"
		+"\n			db.setTransactionSuccessful();"
		+"\n			return true;"
		+"\n		}catch(SQLException ex){"
		+"\n			ex.printStackTrace();"
		+"\n		}finally{"
		+"\n			if (db!=null){"
		+"\n				db.endTransaction();"
		+"\n				db.close();"
		+"\n			}"
		+"\n		}"
		+"\n		return false;"
		+"\n	}").toString();
	}
		
	private String genCreateTable(){
		StringBuffer sb = new StringBuffer();
		sb.append("	static final void createTable(SQLiteDatabase db){"
				      +"\n		db.execSQL( \"CREATE TABLE IF NOT EXISTS \" + TABLENAME + \"(\"");
		int i = 0, nlen = mFields.size() - 1;
		for (MyField field : mFields.keySet()){
			MyColumn anno = mFields.get(field);
			sb.append("\n			 + COLUMNS.")
					.append(field.getName().toUpperCase()).append(" + \" ")
					.append(tranJavaType2Sqlite(field, anno));
			if (anno != null){
				Class<?>type=null;
				if (anno.primaryKey()){
					sb.append(" PRIMARY KEY");
				} else if (anno.unique()){
					sb.append(" UNIQUE");			
	 				if (anno.notNull()){
						sb.append(" NOT NULL");
					}
//				}else if (anno.autoInc() && ( (type=field.getType())==long.class||type==int.class)  ){
//					sb.append(" AUTOINCREMENT");
				}else {				
					if(anno.defaultValue() != null && anno.defaultValue().length() > 0){
						sb.append(" DEFAULT(").append(anno.defaultValue()).append(")");
					}
	 				if (anno.notNull()){
						sb.append(" NOT NULL");
					}
					if (anno.checkValue() != null && anno.checkValue().length() > 0){
						sb.append(" CHECK(").append(anno.checkValue()).append(")");
					}
				}
				
				if (anno.autoInc() && ( (type=field.getType())==long.class||type==int.class)  ){
					sb.append(" AUTOINCREMENT");
				}
				
			}

			if (i != nlen){
				sb.append(",\"");
			}
			++i;
		}
		sb.append(");\" );"
			    +"\n	}");
		return sb.toString();
	}
	
	private String genDropTable(){
		return 
			"	static final void dropTable(SQLiteDatabase db){"
			+"\n		db.execSQL(\"DROP TABLE IF EXISTS \" + TABLENAME + \";\");"
			+"\n	}";
	}
	
	private String genCOLUMNS(){
		StringBuffer sb = new StringBuffer();
		sb.append("	public static final class COLUMNS{"
					  +"\n		public static final String ");
		int i = 0, nlen = mFields.size() - 1;
		for (MyField field : mFields.keySet()){
			sb.append(field.getName().toUpperCase()).append("=\"[");

			if (mAliasColName){
				 int ch = 'A' + i;
				 String sch=null;
				if(ch>'Z'){
					ch-='Z';
					sch= "f"+ch;
				}else{
					sch= String.valueOf((char) ch);
				}

				sb.append(sch).append("]\"");
			} else {
				String fName=field.getName();
				if( fName.equalsIgnoreCase("id")){
					fName="_"+fName.toLowerCase();
				}
				sb.append(fName).append("]\"");
			}
			if (i != nlen){
				sb.append(", ");
				if ((i + 1) % 10 == 0){
					sb.append("\n			");
				}
			}
			++i;
		}
		sb.append(";\n	}");
		return sb.toString();
	}
	
	private String genCOLUMNINDEXS(){
		StringBuffer sb = new StringBuffer();
		sb.append("	public static final class COLUMNINDEXS{"
				      +"\n		public static final int ");
		int i = 0, nlen = mFields.size() - 1;
		for (MyField field : mFields.keySet()){
			sb.append(field.getName().toUpperCase()).append("=").append(String.valueOf(i));
			if (i != nlen){
				sb.append(", ");
				if ((i + 1) % 10 == 0){
					sb.append("\n			");
				}
			}
			++i;
		}
		sb.append(";\n	}");
		return sb.toString();
	}
	
//	private String getJavaTypeDesc(MyField field){
//		Class<?> type = field.getType();
//		String retval = null;
//		if (type == int.class){
//			retval = "int";
//		} else if (type == short.class){
//			retval = "short";
//		} else if (type == long.class){
//			retval = "long";
//		} else if (type == String.class ||type == CharSequence.class){
//				retval = "String";
//		} else if (type == float.class){
//			retval = "float";
//		} else if (type == double.class){
//			retval = "double";
//		}else if(type == boolean.class){
//			retval = "boolean";
//		}else if(type == byte.class){
//			retval = "byte";
//		}  else if(type==byte[].class){
//			retval = "byte[]";
//		}
//		return retval;
//	}
	
	private String tranJavaType2Sqlite(MyField field, MyColumn ann){
		Class<?> type = field.getType();
		String retval = null;
		if (type == int.class ||type == long.class ||type == short.class|| type == boolean.class|| type == byte.class){
			retval = "INTEGER";
//		} else if (type == short.class|| type == boolean.class|| type == byte.class){
//			retval = "SHORT";
//		} else if (type == long.class){
//			retval = "LONG";
		} else if (type == String.class || type == CharSequence.class|| type == char.class){
			if (ann != null){
				if (ann.minSize() > 0 && ann.maxSize() > ann.minSize()){
					retval = "TEXT(" + ann.minSize() + "," + ann.maxSize()
							+ ")";
				}else if (ann.size() > 0){
						retval = "TEXT(" + ann.size() + ")";
				}else{
					retval = "TEXT";
				}
			} else {
				retval = "TEXT";
			}
//		} else if (type == float.class){
//			retval = "FLOAT";
		} else if (type == float.class || type == double.class) {
			retval = "REAL";
		} else if (type == byte[].class){
			retval = "BLOB";
		} else {
			System.out.println(field.getName() + " undefined type "+ type.toString());
			retval =type.toString();
		}

		return retval;
	}
	
	private StringBuffer tranSqliteTypeGetMethod(StringBuffer sb,MyField field,MyColumn anno){	
		boolean notNull = (anno != null && (anno.notNull() || anno.primaryKey() || anno.autoInc()));
		Class<?> type = field.getType();
		String defaultVal=null,getMethod=null,attachExp=null;
		if (type == int.class){
			defaultVal="0";
			getMethod="getInt";
		} else if (type == short.class||type==byte.class){
			defaultVal="0";
			getMethod="getShort";
		} else if (type == long.class){
			defaultVal="0";
			getMethod="getLong";
		} else if (type == String.class || type == CharSequence.class
				|| type == char.class){
			defaultVal=" \"\"";
			getMethod="getString";
		} else if (type == float.class){
			defaultVal="0f";
			getMethod="getFloat";
		} else if (type == double.class){
			defaultVal="0";
			getMethod="getDouble";
		} else if (type == boolean.class){
			defaultVal="false";
			if(mBoolFalseSetNull && (anno==null || !anno.notNull() )){
				getMethod=null;
				attachExp="true";
			}else{
				getMethod="getShort";
				attachExp="==1";
			}
		} else if (type == byte[].class){
			defaultVal="null";
			getMethod="getBlob";
		} else {
			System.out.println(field.getName() + " undefined type "+ type.toString());
		}
		
		final String colName="(COLUMNINDEXS."+field.getName().toUpperCase()+")";
		if (!notNull){
			if(anno.defaultValue()!=null&&anno.defaultValue().length()>0){
				defaultVal=anno.defaultValue();
			}
			sb.append("cursor.isNull").append(colName).append("? ").append(defaultVal).append(":");
		}
		if(getMethod!=null){
			sb.append("cursor.").append(getMethod).append(colName);
		}
		if(attachExp!=null){
			sb.append(attachExp);
		}
		return sb;
	}

	private String upperCaseFirstChar(String str){
		char fc= str.charAt(0);
		if(fc>='a' && fc<='z'){
			fc-=32;
			return fc+ str.substring(1);
		}
		return str;
	}
}// end class CRUDGenerator