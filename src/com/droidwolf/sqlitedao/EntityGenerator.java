/*
 * Copyright (c) 2016 droidwolf(droidwolf2006@gmail.com)
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.droidwolf.sqlitedao;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.List;

public class EntityGenerator {
	List<MyField> mFields;
	String mTableName;
	public EntityGenerator(String tblName, List<MyField> fields) {
		mFields = fields;
		mTableName = tblName;
	}
	
	public void generate(String path){
		OutputStreamWriter osw=null;
		String filename=(path.endsWith("//")? path+"//":path)+ mTableName+".java";
		try{
			osw = new OutputStreamWriter(new FileOutputStream(filename), "UTF-8");
			write(genInfo(),osw);
			write( genClassHeader(),osw);
			write( genFields(),osw);
			write(genConstruct(),osw);
			write( genFieldAccessors(),osw);
			
			write( genClassFooter(),osw);
			System.out.println("generate entity finished!");
		}catch(Exception ex){
			System.out.println(ex.getMessage());
			System.out.flush();
		}finally{
			if(osw!=null)
				try{
					osw.close();
				}catch(IOException e){
					e.printStackTrace();
				}
		}
	}
	private void write(String str,OutputStreamWriter osw) throws IOException{
		if(str!=null){
			osw.write(str);
			osw.write("\n");
		}
	}
	
	private String genInfo(){
		String str="/*"
				+"\n * generated by sqliteCRUDGen.jar"
				+"\n * http://obacow.iteye.com/"
				+"\n */";
		return str;
	}
	
	private String genFields(){
		StringBuilder sb= new StringBuilder();
		for(int i=0;i<mFields.size();i++){
			MyField field= mFields.get(i);
			sb.append("	").append( field.getType().getSimpleName()).append(" ").append(field.getName()).append(";\n");
		}
		return sb.toString();
	}
	
	private String genConstruct(){
		return "	public "+mTableName +"(){}";
	}
	private String genFieldAccessors(){
		StringBuilder sb= new StringBuilder();
		for(int i=0,nlen=mFields.size()-1;i<=nlen;i++){
			MyField field= mFields.get(i);
			String typeName=field.getType().getSimpleName();
			String fieldName=field.getName();
			String fFcfc=upperCaseFirstChar(fieldName);
			//setter
			sb.append("	public void set").append(fFcfc).append("(").append( typeName).append(" val){ ")
			.append(fieldName).append("=val;}");
			//getter
			sb.append("\n	public ").append(typeName ).append(" get").append(fFcfc).append("(){")
			.append(" return ").append(fieldName).append(";}");
			if(i!=nlen){
				sb.append("\n\n");
			}
		}
		return sb.toString();
	}
	

	private String genClassHeader(){
		String str="public class "+mTableName +"{";
		return str;
	}
	
	private String genClassFooter(){
		String str="}//end class "+mTableName ;
		return str;
	}
	
	private String upperCaseFirstChar(String str){
		char fc= str.charAt(0);
		if(fc>='a' && fc<='z'){
			fc-=32;
			return fc+ str.substring(1);
		}
		return str;
	}
}// end class EntityGenerator
